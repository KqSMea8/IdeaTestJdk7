<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd"
        default-autowire="byName">

    <context:annotation-config></context:annotation-config>

    <context:component-scan base-package="com.umbrella"></context:component-scan>

    <!-- 获取配置文件内容 -->
    <bean class="com.umbrella.demo.spring.util.MyPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:common.properties</value>
            </list>
        </property>
    </bean>

    <bean id="commonProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:common.properties</value>
            </list>
        </property>
    </bean>

    <bean class="com.umbrella.demo.spring.util.MyPropertyFactoryBean">
        <property name="commonProperties" ref="commonProperties"></property>
    </bean>

    <bean id="dsTest" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/test"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>

    <bean id="jtTest" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dsJtaTest"></property>
    </bean>

    <!-- 声明式事务 begin -->
    <!--<bean id="txTest" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dsTest"></property>
    </bean>
    <tx:advice id="txAdviceTest" transaction-manager="txTest">
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="studentServicePC" expression="execution(* com.umbrella.demo.mysql.service.StudentService.saveTwo(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdviceTest" pointcut-ref="studentServicePC"></aop:advisor>
    </aop:config>-->
    <!-- 声明式事务 end -->

    <bean id="dsDiskmgmt" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/diskmgmt"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
    <bean id="jtDiskmgmt" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dsJtaDiskmgmt"></property>
    </bean>

    <!-- Atomikos 分布式事务 begin -->
    <bean id="atomikosUserTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"></bean>
    <bean id="atomikosUserTransactionImp" class="com.atomikos.icatch.jta.UserTransactionImp"></bean>
    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosUserTransactionManager"></property>
        <property name="userTransaction" ref="atomikosUserTransactionImp"></property>
    </bean>
    <bean id="dsJtaTest" class="com.atomikos.jdbc.AtomikosDataSourceBean">
        <property name="uniqueResourceName" value="mysql_test"></property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"></property>
        <property name="xaProperties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">123456</prop>
                <prop key="url">jdbc:mysql://localhost:3306/test</prop>
            </props>
        </property>
        <property name="testQuery" value="select 1"></property>
    </bean>
    <bean id="dsJtaDiskmgmt" class="com.atomikos.jdbc.AtomikosDataSourceBean">
        <property name="uniqueResourceName" value="mysql_diskmgmt"></property>
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"></property>
        <property name="xaProperties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">123456</prop>
                <prop key="url">jdbc:mysql://localhost:3306/diskmgmt</prop>
            </props>
        </property>
        <property name="testQuery" value="select 1"></property>
    </bean>

    <tx:advice id="txAdviceTestDiskmgmt" transaction-manager="jtaTransactionManager">
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="studentDiskServicePC" expression="execution(* com.umbrella.demo.atomikos.mysql.service.StudentDiskService.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdviceTestDiskmgmt" pointcut-ref="studentDiskServicePC"></aop:advisor>
    </aop:config>
    <!-- Atomikos 分布式事务 end -->

    <!-- AOP 20151014 begin -->
    <bean id="myAspect" class="com.umbrella.demo.spring.aop.MyAspect"></bean>
    <aop:config>
        <aop:aspect ref="myAspect">
            <aop:pointcut id="springService" expression="execution(* com.umbrella.demo.spring.service.*.*(..))"></aop:pointcut>
            <aop:before pointcut-ref="springService" method="doBefore"></aop:before>
            <aop:after pointcut-ref="springService" method="doAfter"></aop:after>
        </aop:aspect>
    </aop:config>
    <!-- AOP 20151014 end -->

    <!-- Spring 工厂模式 begin -->
    <!--<bean id="user1" class="com.umbrella.demo.spring.factory.UserFactory" factory-method="create">
        <constructor-arg type="java.lang.Long" value="1"></constructor-arg>
    </bean>-->

    <!--<bean id="user11" class="com.umbrella.demo.spring.factory.UserFactory" ></bean>-->

    <bean class="com.umbrella.demo.spring.factory.UserFactory" ></bean>

    <bean id="userFactory2" class="com.umbrella.demo.spring.factory.UserFactory2">
        <property name="id" value="2"></property>
    </bean>
    <bean id="user2" class="com.umbrella.vo.User" factory-bean="userFactory2" factory-method="create"></bean>
    <!-- Spring 工厂模式 end -->

    <!-- Spring 定时任务 begin -->
    <bean id="helloWorldTaskService" class="com.umbrella.demo.spring.task.impl.HelloWorldTaskServiceImpl"></bean>
    <bean id="helloWorldQuartz" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="helloWorldTaskService"></property>
        <property name="targetMethod" value="execute"></property>
        <!-- 这个配置有什么用? -->
        <property name="concurrent" value="true"></property>
    </bean>
    <bean id="helloWorldTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="helloWorldQuartz"></property>
        <property name="cronExpression" value="0/5 * * * * ?"></property>
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="helloWorldTrigger"></ref>
            </list>
        </property>
        <property name="autoStartup" value="true"></property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.threadPool.threadCount">1</prop>
            </props>
        </property>
    </bean>
    <!-- Spring 定时任务 end -->

</beans>